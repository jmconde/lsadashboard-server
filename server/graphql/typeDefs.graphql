scalar DateTime
# scalar Metric
type IntDataPoint {
  x: String,
  y: Int
}

type Metric {
  metric: Float!,
  id: String
}

type GroupedMetrics {
  id: Int
  name: String,
  metrics: [Metric!]!
}

type IvaoID {
  user: String!,
  vid: String,
}

type IvaoMetrics {
  all: [Metric!]!,
  byPilot: [GroupedMetrics!]!
  byDay: [GroupedMetrics!]!
}

type Frequency {
  type: String
  description: String
  frequency_mhz: String
}
type Navaid {
  ident: String
  name: String
  type: String
  lat: Float
  lon: Float
  elevation: Float
  frequency_khz: Float
}

type Airport {
  id: String!
  lat: Float
  lon: Float
  name: String
  location: String
  country: String
  elevation: Float
  frequencies: [Frequency!]
  navaids: [Navaid!]
}

type Flight {
  pilot: Pilot
  departure: Airport
  arrival: Airport
  alternate: Airport
  time: Int!
  plannedTime: Float
  distance: Float!
  plannedDistance: Float
  landingRate: Float
  state: String
  status: String
  pirepId: String
  number: String
  type: String
  blockFuel: Float
  usedFuel: Float
  route: String
  aircraft: Aircraft
  blockOffTime: String
  blockOnTime: String
}

type Pilot {
  id: Int!
  pilotId: String!
  name: String!
  rankId: Int
  rankName: String
  country: String
  home: String
  location: Airport
  flights: Int
  flightTime: Int
  status: Int
  state: Int
  joined: String
  lastFlight: Flight
  vid: String
}

type Aircraft {
  id: Int!
  type: String!
  name: String!
  registration: String!
  state: String!
  status: String!
  location: Airport
  fleet: String
  hub: String
  fuelOnboard: Float
  flightTime: Int
}

type Query {
    getFlightsByPilot(start: String!, end: String!) : [IntDataPoint!]!,
    getTimeByPilot(start: String!, end: String!) : [IntDataPoint!]!,
    getFlightsByDay(start: String!, end: String!) : [IntDataPoint!]!,
    getTimeByDay(start: String!, end: String!) : [IntDataPoint!]!,
    getTotalFlights(start: String!, end: String!) : Metric!,
    getMetrics(start: String!, end: String!) : [Metric!]!
    getIvaoVIds: [IvaoID!]!
    getIvaoMetrics(start: String!, end: String!) : IvaoMetrics!
    getIvaoNotInAirlineMetrics(start: String!, end: String!) : IvaoMetrics!
    getAircraftList: [Aircraft!]!
    getActivePilotList: [Pilot!]!
    getLogFlights(start: String!, end: String!): [Flight!]!
    getAirportList: [Airport!]!
}

# type Mutation {
#   fakeUserAuth(githubLogin: ID!): AuthPayload!
#   addFakeUsers(count: Int=1): [User!]!
#   postPhoto(input: PostPhotoInput!): Photo!
#   githubAuth(code: String!): AuthPayload!
# }

# type Subscription {
#   newPhoto: Photo!
#   newUser: User!
# }